"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

# Load optional local secrets
try:
    from .django_secrets.settings_secrets import *  # type: ignore
except ModuleNotFoundError:
    print("Missing django_secrets.settings_secrets")

import ast
import os
from pathlib import Path
import platform


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# PAOLO - see: https://docs.djangoproject.com/en/1.4/topics/i18n/translation/#how-django-discovers-language-preference


def ugettext(s): return s


RUNNING_MACHINE_NAME = platform.node().upper()

# By default this is NOT a DEV machine
IS_DEVELOPMENT_MACHINE = False

# By default do NOT accept all origins for CORS
CORS_ALLOW_ALL_ORIGINS = False

# Must allow receiving credentials, for the UI Login to work
CORS_ALLOW_CREDENTIALS = True

# By default assets (ie: static, media, etc.)
# are siblings of the project directories structure
PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
MNT_PATH = os.path.abspath(os.path.join(PROJECT_PATH, '..', 'mnt'))

# By default print EMails to console
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEBUG = ast.literal_eval(os.getenv('DEBUG', 'False'))

ALLOWED_HOSTS = ["localhost", "host.docker.internal"]

AUTH_USER_MODEL = 'custom_user.User'

# MUST be different for each Mobashi server
SESSION_COOKIE_NAME = 'sessionid-mobashi-surv'

# Load optional local PRE settings (may change any of the above settings)
try:
    from .django_configs.settings_pre import *  # type: ignore
except ModuleNotFoundError:
    print("Missing django_configs.settings_pre")

# only if not requested otherwise
if not ast.literal_eval(os.getenv('DJANGO_QUIET', 'False')):
    print(u'Project: "{}"'.format(PROJECT_PATH))
    print(u'Running on: "{}"'.format(RUNNING_MACHINE_NAME))
    print(u'With mnt: "{}"'.format(MNT_PATH))
    print(u'Development machine: "{}"'.format(
        'yes' if IS_DEVELOPMENT_MACHINE else 'no'))
    print(u'Debug: "{}"'.format('yes' if DEBUG else 'no'))

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "pgcrypto",
    "rules.apps.AutodiscoverRulesConfig",
    "rest_framework",
    "rest_framework.authtoken",
    'djoser',
    'djoser.webauthn',
    "custom_user",
    "mosurv",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

AUTHENTICATION_BACKENDS = [
    'rules.permissions.ObjectPermissionBackend',
    'django.contrib.auth.backends.ModelBackend',
]

ROOT_URLCONF = "server.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "server.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# PAOLO - Use the project locale directory too
LOCALE_PATHS = (
    os.path.abspath(os.path.join(PROJECT_PATH, 'locale')),
)

MEDIA_ROOT = os.path.join(MNT_PATH, 'media')

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
# Examples: "http://media.lawrence.com/media/", "http://example.com/media/"
MEDIA_URL = '/media/'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
STATIC_ROOT = os.path.join(MNT_PATH, 'static')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/
STATIC_URL = "static/"

STATICFILES_DIRS = (
    #     os.path.abspath(os.path.join(BASE_DIR, "../../static/")),
)

# List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    #    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'it'

TIME_ZONE = 'Europe/Rome'

# PAOLO - Make only these languages available
LANGUAGES = (
    ('it', ugettext('Italian')),
    ('en', ugettext('English')),
)

# PAOLO - Change it from the default (0=Sunday)
FIRST_DAY_OF_WEEK = 1

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # PAOLO - La Token deve essere elencata prima della Session altrimenti ci sono problemi di CSRF
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ]
}

DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
    'SEND_ACTIVATION_EMAIL': False,
    'SERIALIZERS': {},
}

# Load optional local POST settings
try:
    from .django_configs.settings_post import *  # type: ignore
except ModuleNotFoundError:
    print("Missing django_configs.settings_post")
